{"version":3,"file":"static/js/378.77012d09.chunk.js","mappings":"yRAgCA,EA3BmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAAC,KAAD,UACGF,EAAOG,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACjB,OACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAMC,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAMP,GAAlC,SACGI,KAFiBD,EAMzB,KAGN,ECgBD,EAjCmB,SAAC,GAAyB,IAAvBK,EAAsB,EAAtBA,gBACpB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAaA,OACE,kBAAMC,SAZe,SAAAC,GACrBA,EAAEC,iBACGJ,EAAYK,SACjBP,EAAgB,CAAEQ,MAAON,EAAYK,OAAOE,gBAC5CN,EAAe,IAChB,EAOC,WACE,kBACEO,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,MAAOZ,EACPa,SAZiB,SAAAV,GACrB,IAAQS,EAAUT,EAAEW,cAAZF,MACRX,EAAeW,EAChB,KAWG,mBAAQJ,KAAK,SAAb,UACE,yCAIP,E,8BCmCD,EA5DkB,WAEhB,OAA4BT,EAAAA,EAAAA,UAAS,IAArC,eAAOV,EAAP,KAAe0B,EAAf,KACA,GAA4BhB,EAAAA,EAAAA,UAASiB,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBtB,EAArB,KAEQQ,GAAUe,EAAAA,EAAAA,UAChB,kBAAMC,OAAOC,aAAP,OAAuBH,GAA7B,GACA,CAACA,IAFKd,MAsCR,SAASkB,EAAcC,GACrB,OAAOA,EAAKjC,KAAI,YACd,MAAO,CAAEC,GADwB,EAAhBA,GACJC,MADoB,EAAZA,MAEtB,GACF,CAED,OAvCAgC,EAAAA,EAAAA,YAAU,WACR,GAAKpB,EAAL,CACA,IAAMqB,EAAa,IAAIC,gBA0BvB,OAFItB,GA1BU,mCA0BHuB,GAEJ,WACLF,EAAWG,OACZ,CA7BiB,CADJ,wCAId,sGAEIZ,EAAUF,EAAAA,EAAAA,SAFd,UAG8Be,EAAAA,EAAAA,GAAY,CACpCJ,WAAAA,EACAK,YAAa,eACb1B,MAAAA,IANN,mBAQ2B,KALf2B,EAHZ,EAGYA,SAKIC,OARhB,uBASMhB,EAAUF,EAAAA,EAAAA,UAThB,kBAUamB,EAAAA,GAAAA,MAAY,mBAVzB,OAYIpB,EAAUS,EAAcS,IACxBf,EAAUF,EAAAA,EAAAA,UAbd,kDAe0B,aAAlB,KAAMoB,UACRlB,EAAUF,EAAAA,EAAAA,OACVmB,EAAAA,GAAAA,MAAY,KAAMC,UAjBxB,2DAJc,sBA+Bf,GAAE,CAAC9B,KASF,6BACE,SAAC,EAAD,CAAYR,gBAAiBA,IAC5BmB,IAAWD,EAAAA,EAAAA,YAAqB3B,EAAO6C,SACtC,SAAC,EAAD,CAAY7C,OAAQA,MAI3B,C,mMC/DYgD,EAAYC,EAAAA,EAAAA,GAAH,+CAITC,EAAgBD,EAAAA,EAAAA,KAAH,wYAebE,EAAkBF,EAAAA,EAAAA,GAAH,yJASfG,EAAkBH,EAAAA,EAAAA,GAAH,2WAkBfI,GAAiBJ,EAAAA,EAAAA,GAAOK,EAAAA,GAAPL,CAAH,iQ","sources":["components/MoviesList/MoviesList.jsx","components/SearchForm/SearchForm.jsx","Pages/MoviesPage.jsx","components/MoviesList/MoviesList.styled.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes, { shape } from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { MoviesTrendItem, MoviesTrendList } from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <MoviesTrendList>\n      {movies.map(({ id, title }) => {\n        return (\n          <MoviesTrendItem key={id}>\n            <Link to={`${id}`} state={{ from: location }}>\n              {title}\n            </Link>\n          </MoviesTrendItem>\n        );\n      })}\n    </MoviesTrendList>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default MoviesList;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst SearchForm = ({ setSearchParams }) => {\n  const [querySearch, setQuerySearch] = useState('');\n\n  const onHandleSubmit = e => {\n    e.preventDefault();\n    if (!querySearch.trim()) return;\n    setSearchParams({ query: querySearch.trim().toLowerCase() });\n    setQuerySearch('');\n  };\n\n  const onHandleChange = e => {\n    const { value } = e.currentTarget;\n    setQuerySearch(value);\n  };\n  return (\n    <form onSubmit={onHandleSubmit}>\n      <input\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies\"\n        value={querySearch}\n        onChange={onHandleChange}\n      />\n      <button type=\"submit\">\n        <span>Search</span>\n      </button>\n    </form>\n  );\n};\n\nSearchForm.propTypes = { setSearchParams: PropTypes.func.isRequired };\n\nexport default SearchForm;\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport { STATUS } from 'utils/constants';\nimport { fetchMovies } from 'utils/api';\nimport { toast } from 'react-hot-toast';\n\nconst MoviePage = () => {\n  // const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [status, setStatus] = useState(STATUS.IDLE);\n  const [searchParams, setSearchParams] = useSearchParams();\n  // const queryMovie = searchParams.get('query') ?? '';\n  const { query } = useMemo(\n    () => Object.fromEntries([...searchParams]),\n    [searchParams]\n  );\n\n  useEffect(() => {\n    if (!query) return;\n    const controller = new AbortController();\n\n    async function getMoviesTrend() {\n      try {\n        setStatus(STATUS.PENDING);\n        const { results } = await fetchMovies({\n          controller,\n          fetchParams: 'search/movie',\n          query,\n        });\n        if (results.length === 0) {\n          setStatus(STATUS.RESOLVED);\n          return toast.error('Nothing found!');\n        }\n        setMovies(getSimpleData(results));\n        setStatus(STATUS.RESOLVED);\n      } catch (error) {\n        if (error.message !== 'canceled') {\n          setStatus(STATUS.ERROR);\n          toast.error(error.message);\n        }\n      }\n    }\n\n    if (query) getMoviesTrend();\n\n    return () => {\n      controller.abort();\n    };\n  }, [query]);\n\n  function getSimpleData(data) {\n    return data.map(({ id, title }) => {\n      return { id, title };\n    });\n  }\n\n  return (\n    <main>\n      <SearchForm setSearchParams={setSearchParams} />\n      {status === STATUS.RESOLVED && !!movies.length && (\n        <MoviesList movies={movies} />\n      )}\n    </main>\n  );\n};\n\nexport default MoviePage;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const TitleHome = styled.h1`\n  padding: 24px 48px;\n`;\n\nexport const MainContainer = styled.main`\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  align-items: start;\n  padding-right: 24px;\n  padding-left: 24px;\n  width: 100%;\n  color: #212121;\n  border: 2px solid lightblue;\n  background-color: #fff;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const MoviesTrendList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  align-items: start;\n  padding: 12px;\n  width: 100%;\n`;\n\nexport const MoviesTrendItem = styled.li`\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: space-between;\n  width: 97%;\n  padding: 20px 12px;\n  border: 1px solid lightblue;\n  border-radius: 5px;\n  &:nth-of-type(2n) {\n    background-color: lightblue;\n  }\n  &:nth-of-type(2n-1) {\n    background-color: #cbf0fd;\n  }\n  font-size: 22px;\n  font-weight: 500;\n  `;\n\nexport const MovieTrendLink = styled(Link)`\n  color: #212121;\n  list-style: none;\n  text-decoration: none;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    color: tomato;\n    transition: all 0.3s ease-in-out;\n    filter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.25));\n  }\n`;\n"],"names":["movies","location","useLocation","map","id","title","to","state","from","setSearchParams","useState","querySearch","setQuerySearch","onSubmit","e","preventDefault","trim","query","toLowerCase","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","setMovies","STATUS","status","setStatus","useSearchParams","searchParams","useMemo","Object","fromEntries","getSimpleData","data","useEffect","controller","AbortController","getMoviesTrend","abort","fetchMovies","fetchParams","results","length","toast","message","TitleHome","styled","MainContainer","MoviesTrendList","MoviesTrendItem","MovieTrendLink","Link"],"sourceRoot":""}