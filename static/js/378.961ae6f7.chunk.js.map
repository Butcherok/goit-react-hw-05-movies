{"version":3,"file":"static/js/378.961ae6f7.chunk.js","mappings":"uQAsBA,EAnBmB,SAAC,GAAc,IAAbA,EAAY,EAAZA,OACbC,GAAWC,EAAAA,EAAAA,MAGjB,OACE,wBACGF,EAAOG,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACjB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAMP,GAAlC,SACGI,KAFID,EAMZ,KAGN,ECaD,EA/BmB,SAAC,GAAyB,IAAvBK,EAAsB,EAAtBA,gBACpB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAaA,OACE,kBAAMC,SAZe,SAAAC,GACrBA,EAAEC,iBACGJ,EAAYK,SACjBP,EAAgB,CAAEQ,MAAON,EAAYK,OAAOE,gBAC5CN,EAAe,IAChB,EAOC,WACE,kBACEO,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,MAAOZ,EACPa,SAZiB,SAAAV,GACrB,IAAQS,EAAUT,EAAEW,cAAZF,MACRX,EAAeW,EAChB,KAWG,mBAAQJ,KAAK,SAAb,UACE,yCAIP,E,yBCkDD,EAzEkB,WAEhB,OAA4BT,EAAAA,EAAAA,UAAS,IAArC,eAAOV,EAAP,KAAe0B,EAAf,KACA,GAA4BhB,EAAAA,EAAAA,UAASiB,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBtB,EAArB,KAEQQ,GAAUe,EAAAA,EAAAA,UAChB,kBAAMC,OAAOC,aAAP,OAAuBH,GAA7B,GACA,CAACA,IAFKd,MAmDR,SAASkB,EAAcC,GACrB,OAAOA,EAAKjC,KAAI,YACd,MAAO,CAAEC,GADwB,EAAhBA,GACJC,MADoB,EAAZA,MAEtB,GACF,CAED,OApDAgC,EAAAA,EAAAA,YAAU,WACR,GAAKpB,EAAL,CACA,IAAMqB,EAAa,IAAIC,gBA2BvB,OAFItB,GA3BU,mCA2BHuB,GAEJ,WACLF,EAAWG,OACZ,CA9BiB,CADJ,wCAId,sGAEIZ,EAAUF,EAAAA,EAAAA,SAFd,UAG4Be,EAAAA,EAAAA,GAAY,CAClCJ,WAAAA,EACAK,YAAa,eACb1B,MAAAA,IANN,mBAQ2B,KALhB2B,EAHX,EAGWA,SAKKC,OARhB,uBASMhB,EAAUF,EAAAA,EAAAA,UAThB,kBAUamB,EAAAA,GAAAA,MAAY,mBAVzB,OAYIpB,EAAUS,EAAcS,IACxBf,EAAUF,EAAAA,EAAAA,UAbd,kDAgB0B,aAAlB,KAAMoB,UACRlB,EAAUF,EAAAA,EAAAA,OACVmB,EAAAA,GAAAA,MAAY,KAAMC,UAlBxB,2DAJc,sBAgCf,GAAE,CAAC9B,KAqBF,6BACE,SAAC,EAAD,CAAYR,gBAAiBA,IAC5BmB,IAAWD,EAAAA,EAAAA,YAAqB3B,EAAO6C,SACtC,SAAC,EAAD,CAAY7C,OAAQA,MAI3B,C,6FC3EDgD,EAAAA,EAAAA,SAAAA,QADiB,gCAGV,IAAMN,EAAW,mCAAG,oGACzBC,EADyB,EACzBA,YADyB,IAEzB1B,MAAAA,OAFyB,MAEjB,KAFiB,EAGzBqB,EAHyB,EAGzBA,WAHyB,UAKFU,EAAAA,EAAAA,GAAML,EAAa,CACxCM,OAAQX,EAAWW,OACnBC,OAAQ,CAAEC,QAXE,mCAWgBlC,MAAAA,KAPL,cAKnBmC,EALmB,yBASlBA,EAAShB,MATS,2CAAH,qD,sDCNjB,IAAMT,EAAS,CACpB0B,KAAM,OACNC,QAAS,UACTC,SAAU,WACVC,MAAO,Q","sources":["components/MoviesList/MoviesList.jsx","components/SearchForm/SearchForm.jsx","Pages/MoviesPage.jsx","utils/api.js","utils/constans.js"],"sourcesContent":["import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst MoviesList = ({movies}) => {\n  const location = useLocation();\n\n\n  return (\n    <ul>\n      {movies.map(({ id, title }) => {\n        return (\n          <li key={id}>\n            <Link to={`${id}`} state={{ from: location }}>\n              {title}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default MoviesList;\n","import React, { useState } from 'react';\n\nconst SearchForm = ({ setSearchParams }) => {\n  const [querySearch, setQuerySearch] = useState('');\n\n  const onHandleSubmit = e => {\n    e.preventDefault();\n    if (!querySearch.trim()) return;\n    setSearchParams({ query: querySearch.trim().toLowerCase() });\n    setQuerySearch('');\n  };\n\n  const onHandleChange = e => {\n    const { value } = e.currentTarget;\n    setQuerySearch(value);\n  };\n  return (\n    <form onSubmit={onHandleSubmit}>\n      <input\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies\"\n        value={querySearch}\n        onChange={onHandleChange}\n      />\n      <button type=\"submit\">\n        <span>Search</span>\n      </button>\n    </form>\n  );\n};\n\nexport default SearchForm;\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport { STATUS } from 'utils/constans';\nimport { fetchMovies } from 'utils/api';\nimport { toast } from 'react-hot-toast';\n\nconst MoviePage = () => {\n  // const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [status, setStatus] = useState(STATUS.IDLE);\n  const [searchParams, setSearchParams] = useSearchParams();\n  // const queryMovie = searchParams.get('query') ?? '';\n  const { query } = useMemo(\n    () => Object.fromEntries([...searchParams]),\n    [searchParams]\n  );\n\n  useEffect(() => {\n    if (!query) return;\n    const controller = new AbortController();\n\n    async function getMoviesTrend() {\n      try {\n        setStatus(STATUS.PENDING);\n        const {results} = await fetchMovies({\n          controller,\n          fetchParams: 'search/movie',\n          query,\n        });\n        if (results.length === 0) {\n          setStatus(STATUS.RESOLVED);\n          return toast.error('Nothing found!');\n        }\n        setMovies(getSimpleData(results));\n        setStatus(STATUS.RESOLVED);\n        // setSearchParams({});\n      } catch (error) {\n        if (error.message !== 'canceled') {\n          setStatus(STATUS.ERROR);\n          toast.error(error.message);\n        }\n      }\n    }\n\n    if (query) getMoviesTrend();\n\n    return () => {\n      controller.abort();\n    };\n  }, [query]);\n\n  // const updateQueryString = query => {\n  //   const nextParams = query !== '' ? { query } : {};\n  //   setSearchParams(nextParams);\n  // };\n\n  // const onHandleSubmit = e => {\n  //   e.preventDefault();\n  //   if (!queryMovie.trim()) return;\n  //   setSearchParams({ query: queryMovie.trim().toLowerCase() });\n  //   // setQuery(queryText);\n  // };\n\n  function getSimpleData(data) {\n    return data.map(({ id, title }) => {\n      return { id, title };\n    });\n  }\n\n  return (\n    <main>\n      <SearchForm setSearchParams={setSearchParams} />\n      {status === STATUS.RESOLVED && !!movies.length && (\n        <MoviesList movies={movies} />\n      )}\n    </main>\n  );\n};\n\nexport default MoviePage;\n","import axios from 'axios';\n\nconst API_KEY = 'fd0a5f8c566fdaa6a63aeafeb4fed4c5';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\naxios.defaults.baseURL = BASE_URL;\n\nexport const fetchMovies = async ({\n  fetchParams,\n  query = null,\n  controller,\n}) => {\n  const response = await axios(fetchParams, {\n    signal: controller.signal,\n    params: { api_key: API_KEY, query },\n  });\n  return response.data;\n};\n","export const STATUS = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  ERROR: 'error',\n};\n"],"names":["movies","location","useLocation","map","id","title","to","state","from","setSearchParams","useState","querySearch","setQuerySearch","onSubmit","e","preventDefault","trim","query","toLowerCase","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","setMovies","STATUS","status","setStatus","useSearchParams","searchParams","useMemo","Object","fromEntries","getSimpleData","data","useEffect","controller","AbortController","getMoviesTrend","abort","fetchMovies","fetchParams","results","length","toast","message","axios","signal","params","api_key","response","IDLE","PENDING","RESOLVED","ERROR"],"sourceRoot":""}