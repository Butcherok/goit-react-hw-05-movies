{"version":3,"file":"static/js/30.9d86e467.chunk.js","mappings":"yRAmBA,EAdiB,SAAC,GAAsB,IAApBA,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SACtB,OACE,UAAC,KAAD,CAAMD,GAAIA,EAAV,WACE,SAAC,MAAD,CAAaE,KAAM,KAClBD,IAGN,ECwDD,EAjEkB,SAAC,GAAe,IAAbE,EAAY,EAAZA,MAEjBC,EAOED,EAPFC,OACAC,EAMEF,EANFE,SACAC,EAKEH,EALFG,aACAC,EAIEJ,EAJFI,YACAC,EAGEL,EAHFK,aACAC,EAEEN,EAFFM,QACAC,EACEP,EADFO,MAGIC,EAAOH,EACTA,EAAaI,MAAM,KAAK,GACxB,yBAEEC,EAASN,EAAW,0CACaA,GACnC,mCAEEO,EAAYV,EAAOW,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,MAEjDF,EAAQF,EAAUK,OACpBL,EACA,uCACEM,EAAQC,KAAKC,MAAqB,GAAfhB,GACzB,OACE,iCACE,4BACE,gBAAKiB,IAAKV,EAAQW,IAAKf,KACvB,0BACGC,EADH,KACYC,EADZ,QAGA,2CAAmBS,EAAnB,QACA,sCACA,0BAAOf,KACP,oCACA,0BAAOW,QAET,4BACE,qBACA,2BACE,yBACE,SAAC,KAAD,CAAMhB,GAAI,OAAV,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAI,UAAV,+BAMX,E,oBCID,EAlDqB,WAAO,IAAD,IACnByB,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KACpD,GAA4BC,EAAAA,EAAAA,UAASC,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAO5B,EAAP,KAAcgC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkCR,OAhCAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACA,IAAMG,EAAa,IAAIC,gBAyBvB,OAFIJ,GAzBU,mCAyBDK,GAEN,WACLF,EAAWG,OACZ,CA5BmB,CADN,wCAId,oGAEIR,EAAUF,EAAAA,EAAAA,SAFd,UAGwBW,EAAAA,EAAAA,GAAY,CAC9BJ,WAAAA,EACAK,YAAY,SAAD,OAAWR,KAL5B,UAO2B,KAJnBS,EAHR,QAOgB1B,OAPhB,uBAQMe,EAAUF,EAAAA,EAAAA,UARhB,kBASac,EAAAA,GAAAA,MAAY,mBATzB,OAWIX,EAASU,GACTX,EAAUF,EAAAA,EAAAA,UAZd,kDAc0B,aAAlB,KAAMe,UACRb,EAAUF,EAAAA,EAAAA,OACVc,EAAAA,GAAAA,MAAY,KAAMC,UAhBxB,2DAJc,sBA8Bf,GAAE,CAACX,KAGF,6BACE,SAAC,EAAD,CAAUpC,GAAI2B,EAAaqB,QAA3B,qBACCf,IAAWD,EAAAA,EAAAA,WAAmB,SAAC,EAAD,CAAW7B,MAAOA,KACjD,SAAC,EAAA8C,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,MACU,MAGjB,C","sources":["components/BackLink/BackLink.jsx","components/MovieInfo/MovieInfo.jsx","Pages/MovieDetails.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { HiArrowLeft } from 'react-icons/hi';\nimport { Link } from 'react-router-dom';\n\nconst BackLink = ({ to, children }) => {\n  return (\n    <Link to={to}>\n      <HiArrowLeft size={24} />\n      {children}\n    </Link>\n  );\n};\n\nBackLink.propTypes = {\n  to: PropTypes.object.isRequired,\n  children: PropTypes.string.isRequired,\n};\n\nexport default BackLink;\n","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MovieInfo = ({ movie }) => {\n  const {\n    genres,\n    overview,\n    vote_average,\n    poster_path,\n    release_date,\n    tagline,\n    title,\n  } = movie;\n\n  const date = release_date\n    ? release_date.split('-')[0]\n    : 'No release information';\n\n  const poster = poster_path\n    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n    : 'https://placehold.co/500x750/png';\n\n  const genreList = genres.map(genre => genre.name).join(', ');\n\n  const genre = genreList.length\n    ? genreList\n    : 'Sorry! Information is not available.';\n  const score = Math.round(vote_average * 10);\n  return (\n    <>\n      <div>\n        <img src={poster} alt={tagline} />\n        <h2>\n          {title} ({date})\n        </h2>\n        <span>User Score: {score}%</span>\n        <h3>Overview</h3>\n        <span>{overview}</span>\n        <h3>Genres</h3>\n        <span>{genre}</span>\n      </div>\n      <div>\n        <span></span>\n        <ul>\n          <li>\n            <Link to={'cast'}>Cast</Link>\n          </li>\n          <li>\n            <Link to={'reviews'}>Reviews</Link>\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n};\n\nMovieInfo.propTypes = {\n  movie: PropTypes.shape({\n    release_date: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    tagline: PropTypes.string.isRequired,\n    poster_path: PropTypes.string,\n    vote_average: PropTypes.number.isRequired,\n    genres: PropTypes.array.isRequired,\n    overview: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieInfo;\n","import { Suspense, useEffect, useRef, useState } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { toast } from 'react-hot-toast';\nimport BackLink from 'components/BackLink/BackLink';\nimport MovieInfo from 'components/MovieInfo/MovieInfo';\nimport { STATUS } from 'utils/constants';\nimport { fetchMovies } from 'utils/api';\n\nconst MovieDetails = () => {\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/');\n  const [status, setStatus] = useState(STATUS.IDLE);\n  const [movie, setMovie] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    const controller = new AbortController();\n\n    async function getMovieInfo() {\n      try {\n        setStatus(STATUS.PENDING);\n        let results = await fetchMovies({\n          controller,\n          fetchParams: `movie/${movieId}`,\n        });\n        if (results.length === 0) {\n          setStatus(STATUS.RESOLVED);\n          return toast.error('Nothing found!');\n        }\n        setMovie(results);\n        setStatus(STATUS.RESOLVED);\n      } catch (error) {\n        if (error.message !== 'canceled') {\n          setStatus(STATUS.ERROR);\n          toast.error(error.message);\n        }\n      }\n    }\n\n    if (movieId) getMovieInfo();\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <main>\n      <BackLink to={backLinkHref.current}>Go back</BackLink>\n      {status === STATUS.RESOLVED && <MovieInfo movie={movie} />}\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>{' '}\n    </main>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["to","children","size","movie","genres","overview","vote_average","poster_path","release_date","tagline","title","date","split","poster","genreList","map","genre","name","join","length","score","Math","round","src","alt","location","useLocation","backLinkHref","useRef","state","from","useState","STATUS","status","setStatus","setMovie","movieId","useParams","useEffect","controller","AbortController","getMovieInfo","abort","fetchMovies","fetchParams","results","toast","message","current","Suspense","fallback"],"sourceRoot":""}