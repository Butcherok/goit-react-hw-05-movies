{"version":3,"file":"static/js/304.0af079fe.chunk.js","mappings":"ySAGaA,GAAeC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,8Y,SCgBzB,EAdiB,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SACtB,OACE,UAACJ,EAAD,CAAcG,GAAIA,EAAlB,WACE,SAAC,MAAD,CAAaE,KAAM,KAClBD,IAGN,ECVYE,EAAgBL,EAAAA,EAAAA,IAAH,sGAObM,EAAcN,EAAAA,EAAAA,IAAH,2CC4DxB,EAjEkB,SAAC,GAAe,IAAbO,EAAY,EAAZA,MAEjBC,EAOED,EAPFC,OACAC,EAMEF,EANFE,SACAC,EAKEH,EALFG,aACAC,EAIEJ,EAJFI,YACAC,EAGEL,EAHFK,aACAC,EAEEN,EAFFM,QACAC,EACEP,EADFO,MAGIC,EAAOH,EACTA,EAAaI,MAAM,KAAK,GACxB,yBAEEC,EAASN,EAAW,0CACaA,GACnC,mCAEEO,EAAYV,EAAOW,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,MAEjDF,EAAQF,EAAUK,OACpBL,EACA,uCACEM,EAAQC,KAAKC,MAAqB,GAAfhB,GACzB,OACE,iCACE,UAACL,EAAD,YACE,SAACC,EAAD,CAAaqB,IAAKV,EAAQW,IAAKf,KAC/B,0BACGC,EADH,KACYC,EADZ,QAGA,2CAAmBS,EAAnB,QACA,sCACA,0BAAOf,KACP,oCACA,0BAAOW,QAET,4BACE,qBACA,2BACE,yBACE,SAAC,KAAD,CAAMlB,GAAI,OAAV,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAI,UAAV,+BAMX,E,8BCID,EAlDqB,WAAO,IAAD,IACnB2B,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KACpD,GAA4BC,EAAAA,EAAAA,UAASC,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAO5B,EAAP,KAAcgC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkCR,OAhCAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACA,IAAMG,EAAa,IAAIC,gBAyBvB,OAFIJ,GAzBU,mCAyBDK,GAEN,WACLF,EAAWG,OACZ,CA5BmB,CADN,wCAId,oGAEIR,EAAUF,EAAAA,EAAAA,SAFd,UAGwBW,EAAAA,EAAAA,GAAY,CAC9BJ,WAAAA,EACAK,YAAY,SAAD,OAAWR,KAL5B,UAO2B,KAJnBS,EAHR,QAOgB1B,OAPhB,uBAQMe,EAAUF,EAAAA,EAAAA,UARhB,kBASac,EAAAA,GAAAA,MAAY,mBATzB,OAWIX,EAASU,GACTX,EAAUF,EAAAA,EAAAA,UAZd,kDAc0B,aAAlB,KAAMe,UACRb,EAAUF,EAAAA,EAAAA,OACVc,EAAAA,GAAAA,MAAY,KAAMC,UAhBxB,2DAJc,sBA8Bf,GAAE,CAACX,KAGF,UAAC,KAAD,YACE,SAAC,EAAD,CAAUtC,GAAI6B,EAAaqB,QAA3B,qBACCf,IAAWD,EAAAA,EAAAA,WAAmB,SAAC,EAAD,CAAW7B,MAAOA,KACjD,SAAC,EAAA8C,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,MACU,MAGjB,C,mMCtDYC,EAAYvD,EAAAA,EAAAA,GAAH,+CAITwD,EAAgBxD,EAAAA,EAAAA,KAAH,wYAebyD,EAAkBzD,EAAAA,EAAAA,GAAH,2JASf0D,EAAkB1D,EAAAA,EAAAA,GAAH,2WAkBf2D,GAAiB3D,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,iQ","sources":["components/BackLink/BackLink.styled.jsx","components/BackLink/BackLink.jsx","components/MovieInfo/MovieInfo.styled.jsx","components/MovieInfo/MovieInfo.jsx","Pages/MovieDetails.jsx","components/MoviesList/MoviesList.styled.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const BackwardLink = styled(Link)`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: center;\n  align-items: center;\n  gap: 12px;\n  padding: 24px;\n  color: #212121;\n  font-size: 22px;\n  font-weight: 500;\n  &:hover,\n  &:focus {\n    scale: 1.05;\n    color: tomato;\n    transition: all 0.3s ease-in-out;\n    filter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.25));\n  }\n`;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { HiArrowLeft } from 'react-icons/hi';\nimport { BackwardLink } from './BackLink.styled';\n\nconst BackLink = ({ to, children }) => {\n  return (\n    <BackwardLink to={to}>\n      <HiArrowLeft size={24} />\n      {children}\n    </BackwardLink>\n  );\n};\n\nBackLink.propTypes = {\n  to: PropTypes.object.isRequired,\n  children: PropTypes.string.isRequired,\n};\n\nexport default BackLink;\n","import styled from '@emotion/styled';\n\nexport const BaseMovieInfo = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  gap: 12px;\n`;\n\nexport const MoviePoster = styled.img`\nmax-width: 320px;\n`;","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { BaseMovieInfo, MoviePoster } from './MovieInfo.styled';\n\nconst MovieInfo = ({ movie }) => {\n  const {\n    genres,\n    overview,\n    vote_average,\n    poster_path,\n    release_date,\n    tagline,\n    title,\n  } = movie;\n\n  const date = release_date\n    ? release_date.split('-')[0]\n    : 'No release information';\n\n  const poster = poster_path\n    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n    : 'https://placehold.co/500x750/png';\n\n  const genreList = genres.map(genre => genre.name).join(', ');\n\n  const genre = genreList.length\n    ? genreList\n    : 'Sorry! Information is not available.';\n  const score = Math.round(vote_average * 10);\n  return (\n    <>\n      <BaseMovieInfo>\n        <MoviePoster src={poster} alt={tagline} />\n        <h2>\n          {title} ({date})\n        </h2>\n        <span>User Score: {score}%</span>\n        <h3>Overview</h3>\n        <span>{overview}</span>\n        <h3>Genres</h3>\n        <span>{genre}</span>\n      </BaseMovieInfo>\n      <div>\n        <span></span>\n        <ul>\n          <li>\n            <Link to={'cast'}>Cast</Link>\n          </li>\n          <li>\n            <Link to={'reviews'}>Reviews</Link>\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n};\n\nMovieInfo.propTypes = {\n  movie: PropTypes.shape({\n    release_date: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    tagline: PropTypes.string.isRequired,\n    poster_path: PropTypes.string,\n    vote_average: PropTypes.number.isRequired,\n    genres: PropTypes.array.isRequired,\n    overview: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieInfo;\n","import { Suspense, useEffect, useRef, useState } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { toast } from 'react-hot-toast';\nimport BackLink from 'components/BackLink/BackLink';\nimport MovieInfo from 'components/MovieInfo/MovieInfo';\nimport { STATUS } from 'utils/constants';\nimport { fetchMovies } from 'utils/api';\nimport { MainContainer } from 'components/MoviesList/MoviesList.styled';\n\nconst MovieDetails = () => {\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/');\n  const [status, setStatus] = useState(STATUS.IDLE);\n  const [movie, setMovie] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    const controller = new AbortController();\n\n    async function getMovieInfo() {\n      try {\n        setStatus(STATUS.PENDING);\n        let results = await fetchMovies({\n          controller,\n          fetchParams: `movie/${movieId}`,\n        });\n        if (results.length === 0) {\n          setStatus(STATUS.RESOLVED);\n          return toast.error('Nothing found!');\n        }\n        setMovie(results);\n        setStatus(STATUS.RESOLVED);\n      } catch (error) {\n        if (error.message !== 'canceled') {\n          setStatus(STATUS.ERROR);\n          toast.error(error.message);\n        }\n      }\n    }\n\n    if (movieId) getMovieInfo();\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <MainContainer>\n      <BackLink to={backLinkHref.current}>Go back</BackLink>\n      {status === STATUS.RESOLVED && <MovieInfo movie={movie} />}\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>{' '}\n    </MainContainer>\n  );\n};\n\nexport default MovieDetails;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const TitleHome = styled.h1`\n  padding: 24px 48px;\n`;\n\nexport const MainContainer = styled.main`\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  align-items: start;\n  padding-right: 24px;\n  padding-left: 24px;\n  width: 100%;\n  color: #212121;\n  border: 2px solid lightblue;\n  background-color: #fff;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const MoviesTrendList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  align-items: start;\n  padding: 0 12px;\n  width: 100%;\n`;\n\nexport const MoviesTrendItem = styled.li`\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: space-between;\n  width: 97%;\n  padding: 20px 12px;\n  border: 1px solid lightblue;\n  border-radius: 5px;\n  &:nth-of-type(2n) {\n    background-color: lightblue;\n  }\n  &:nth-of-type(2n-1) {\n    background-color: #cbf0fd;\n  }\n  font-size: 22px;\n  font-weight: 500;\n  `;\n\nexport const MovieTrendLink = styled(Link)`\n  color: #212121;\n  list-style: none;\n  text-decoration: none;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    color: tomato;\n    transition: all 0.3s ease-in-out;\n    filter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.25));\n  }\n`;\n"],"names":["BackwardLink","styled","Link","to","children","size","BaseMovieInfo","MoviePoster","movie","genres","overview","vote_average","poster_path","release_date","tagline","title","date","split","poster","genreList","map","genre","name","join","length","score","Math","round","src","alt","location","useLocation","backLinkHref","useRef","state","from","useState","STATUS","status","setStatus","setMovie","movieId","useParams","useEffect","controller","AbortController","getMovieInfo","abort","fetchMovies","fetchParams","results","toast","message","current","Suspense","fallback","TitleHome","MainContainer","MoviesTrendList","MoviesTrendItem","MovieTrendLink"],"sourceRoot":""}